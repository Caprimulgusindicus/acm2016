#include <iostream>
#include <map>
#include <string>
#include <algorithm>
#include <stdio.h>
using namespace std;
const int Max = 202;
int g[Max][Max],n;//g存图
int dp[Max][2];
bool flag;
int solve(int x, int y)//记忆化搜索根据方程很好写
{
   if(dp[x][y] != -1) return(dp[x][y]);
   if(y)
   {
      int sum = 1;
      for(int i = 1; i <= n; i++)
         if(g[x][i]) sum += solve(i,0);
      dp[x][y] = sum;
      return(sum);
   }
   else
   {
      int sum = 0;
      for(int i = 1; i <= n; i++)
         if(g[x][i]) sum += max(solve(i,1),solve(i,0));
      dp[x][y] = sum;
      return(sum);
   }
}
int main()
{
//freopen("E:/in.txt","r",stdin);
//freopen("E:/out.txt","w",stdout);
   while(scanf("%d",&n) == 1 && n)
   {
      for(int i = 1; i <= n; i++)//初始化
         for(int j = 1; j <= n; j++)
         {  
             g[i][j] = 0; dp[i][0] = -1; dp[i][1] = -1;
         }
      char name1[102],name2[102];
      scanf("%s",name1);
      string s1, s2;
      map<string,int> m;//保存名字和对应的编号
      int num = 0;
      s1 = name1;
      m[s1] = ++num;
      for(int i = 1; i < n; i++)//得到名字的编号然后建树
      {
         scanf("%s %s",name1,name2);
         s1 = name1; s2 = name2;
         if(!m[s1]) m[s1] = ++num;
         if(!m[s2]) m[s2] = ++num;
         g[m[s2]][m[s1]] = 1;
      }
      for(int i = 1; i <= n; i++)//叶子节点的初始化
      {
         int sum = 0;
         for(int j = 1; j <= n; j++)
            if(g[i][j]) sum ++;
         if(!sum)
         {
            dp[i][1] = 1; dp[i][0] = 0;
         }
      }
      printf("%d ",max(solve(1,0),solve(1,1)));
      if(n == 2) { printf("No\n"); continue;}
      if(n == 1) { printf("Yes\n"); continue;}
      flag = 1;
      for(int i = 1; i <= n; i++)//判断解是否唯一
      {
         if(dp[i][1] == dp[i][0])
         {
            for(int j = 1; j <= n; j++)
            {
               if(g[i][j] && dp[j][1] == dp[j][0])
               {
                  flag = false;
                  break;
               }
            }
         }
         if(!flag) break;
      }
      if(!flag) printf("No\n");
      else printf("Yes\n");
   }
   return(0);
}
